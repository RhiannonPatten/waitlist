---
title: "model"
format: html
toc: true
toc-depth: 3
code-fold: false
execute:
  echo: false
  warning: false
  message: false
---

```{r}
library(tidyverse)
library(readxl)
library(tidymodels)
library(gt)
library(reactable)

theme_set(theme_minimal())
options("scipen"=100, "digits"=2)

data_clean<-read_csv("data/data_clean.csv")
```

## Project outline

We invited over 5,000 individuals on an orthopaedic waitlist to participate in a survey with the aim of characterising patients on the waitlist and determine their specific needs in order to develop an online intervention. Patients were asked questions relating to their medical history and current health status, demographics, psychological wellbeing and pain intensity. Just over 1,000 patients responded to the survey.


**Aim (of this manuscript)**: to identify individuals on an orthopaedic waitlist who have *elevated cardiovascular risk*

List of all variables collected:

• Age

• Gender

• Postcode

• Joint affected

• Time spent on waitlist

• Education level

• Employment status

• Indigenous status (Aus or NZ)

• Preferred language

• Country of birth

• Osteoarthritis status (yes/no)

• Medical history: presence of diabetes, high cholesterol, high blood pressure, asthma, injury, family medical history

• Lifestyle:

  o smoking status and amount

  o past smoking status and amount

  o alcohol consumed (drinks per day)

  o Sleep (hours per night)

  o Physical activity (from the Active Australia Survey) – MET mins/week and whether they meet the physical activity guidelines

• Psychological wellbeing:

  o Depression score (PHQ-9)

  o Psychological distress (K-10)

  o Mental wellbeing score (sWEMWBS)

  o Loneliness score (UCLAS)

  o Social connectedness score (SCS)

• Quality of life (from EQ-5D)

• Pain intensity:

  o Numerical rating scale (1-10 score)

  o 4-item pain intensity score
  
  
**Independent variables** to be used in modeling:

-          Age: `age`
-          Gender: `gender`
-          Wait time: 
-          OA status
-          Education
-          Indigenous status
-          Sleep
-          Alcohol amount
-          Depression score
-          Pain score
  
  
### Data cleaning and recoding
  
Merging categories 4 and 5 for `cvdrisk_index`

```{r}

data_clean<-data_clean%>%
  mutate(cvdrisk_index_merged=case_when(
    cvdrisk_index==5 ~ 4, 
    TRUE~cvdrisk_index)
    )

res<-data_clean%>%
  count(cvdrisk_index_merged)%>%
  mutate(prop= round(n / sum(n), 3))

res%>%gt()

res%>%ggplot(aes(cvdrisk_index_merged, n, fill=as_factor(cvdrisk_index_merged)))+
  geom_col()+
  labs(
    title="Risk categories",
    x="Risk categories",
    fill="Risk categories"
    
  )

```

- suggestions: 

1. `age`: would be better to introduce ranges (15-25, 25-35, etc.) The "duration" of the range can be set

```{r}

data_clean%>%ggplot(aes(age))+
  geom_histogram(binwidth = 5)+scale_x_continuous(breaks=(seq(15,90,by=10)))

```


Recoding age into 3 category grous (for confirmation):
```{r}
data_clean<-data_clean %>% mutate(
  age_categ=case_when((age>14 & age<35)~"15-34",
                      (age>34 & age<55)~"35-54",
                      (age>54 & age<70)~"55-69",
                      TRUE~"70+"
                      )
)

data_clean%>%ggplot(
  aes(age_categ, fill=factor(cvdrisk_index_merged))
  )+
   geom_bar(position = "dodge")

```


`gender`

```{r}

#data_clean%>%count(gender)%>%gt()

data_clean<-data_clean%>%
  mutate(
    gender=factor(gender),
    cvdrisk_index_merged=factor(cvdrisk_index_merged)
  )
  
data_clean%>%
  ggplot(
    aes(gender, fill=age_categ)
  )+
   geom_bar(position = "dodge")

data_clean%>%ggplot(
  aes(gender, fill=factor(cvdrisk_index_merged))
  )+
   geom_bar(position = "dodge")

```
`wait.time.days`

I see a few spikes there....
can this be ranges, e.g. short-wait, mid, long with in-betweens?

Suggestion:

- short wait

- mid wait

- long wait ?

Waiting time in days converted into years

```{r}
summary(data_clean$wait.time.days)

data_clean%>%ggplot(aes(wait.time.days))+
  geom_histogram(binwidth = 5)


data_clean%>% ggplot(aes(as_factor(cvdrisk_index_merged), wait.time.days))+
  geom_boxplot(outlier.colour = "red", outlier.shape = 1)+
  labs(
    title="Waiting time",
    x="Risk categories",
    y="Waiting time in days"
  )

data_clean<-data_clean%>%
  mutate(
    waiting_time_yrs=factor(round(wait.time.days/365))
  )


data_clean%>%
  ggplot(
    aes(waiting_time_yrs, fill=cvdrisk_index_merged)
  )+
   geom_bar(position = "dodge")

data_clean%>%
  ggplot(
    aes(cvdrisk_index_merged, fill=waiting_time_yrs)
  )+
   geom_bar(position = "dodge")



```
OA status = `OA`

```{r}

data_clean%>%count(OA)%>%gt()

data_clean%>% ggplot(aes(as_factor(OA), fill=as_factor(cvdrisk_index_merged)))+
  geom_bar(position="dodge")+
  labs(
    title="Risk categories across OA",
    x="OA",
    fill="Risk categories"
    
  )

```

Education= `edu_level` ?

1, Year 11 or lower | 

2, Year 12 or equivalent | 

3, TAFE or trade certificate | 

4, Certificate IV | 

5, Diploma or Advanced Diploma | 

6, Bachelor Degree (not including honours) | 

7, Honours, Graduate Certificate, Graduate Diploma | 

8, Postgraduate Diploma, Postgraduate degree or Masters Degree | 

9, Doctorate

```{r}

data_clean%>%count(edu_level)%>%gt()

data_clean%>% ggplot(aes(as_factor(cvdrisk_index_merged), fill=as_factor(cvdrisk_index_merged)))+
  geom_bar()+
  facet_wrap(~edu_level,
             labeller = labeller( edu_level=c(
               "1"="Year 11 or lower", 

"2"="Year 12 or equivalent",

"3"="TAFE or trade certificate",

"4"="Certificate IV",

"5"="Diploma or Advanced Diploma",

"6"="Bachelor Degree (not including honours)",

"7"="Honours, Graduate Certificate, Graduate Diploma",

"8"="Postgraduate Diploma, Postgraduate degree or Masters Degree",

"9"="Doctorate",
"NA"="NA"
             )
             )) +
  labs(title="Risk categories across 1-9 Education levels",
       fill="Risk categories",
       x="Education level")



data_clean<-data_clean %>% mutate(
  edu_level=factor(edu_level),
  edu_level_categ=case_when(edu_level %in% c("1", "2") ~"yr11_yr12",
                            edu_level %in% c("3", "4", "5")~"cert_diploma",
                            edu_level =="6" ~"bachelor",
                            edu_level %in% c("7", "8", "9")~"postgrad",
                            TRUE~"not_provided"
  )
    
)

data_clean%>%count(edu_level_categ, sort=TRUE)


data_clean%>% ggplot(aes(cvdrisk_index_merged, fill=cvdrisk_index_merged))+
  geom_bar()+
  facet_wrap(~edu_level_categ) +
  labs(title="Risk categories Education level categories",
       fill="Risk categories",
       x="Education level categories")

```

Indigenous status: `aus_indigenous` `nz_indigenous`

`aus_indigenous`: 0, Neither | 1, Aboriginal | 2, Torres Strait Islander | 3, Both | 4, Prefer not to say 

suggested recoding:
0 (no)
1(yes):1,2,3
4: merge 4 and NA

Also, given a small number of 0 (no) and high 4 - merge 0 into 4


`nz_indigenous`: Are you Maori? 
See high NAs

Suggested recoding
0 (no?)
1 (yes?)
4 NA

Same suggestion as above: merge 0 to 4

```{r}
data_clean%>%count(aus_indigenous)%>%gt()

data_clean%>%count(nz_indigenous)%>%gt()

data_clean<-data_clean%>%mutate(
  aus_indigenous_recoded=case_when(aus_indigenous==0 ~aus_indigenous,
                                   aus_indigenous %in% c(1, 2,3)~1,
                                   TRUE~4),
  nz_indigenous_recoded=case_when(nz_indigenous %in% c(0, 1) ~ nz_indigenous,
                                   TRUE~4)
)

data_clean%>%count(aus_indigenous_recoded)%>%gt()

data_clean%>%count(nz_indigenous_recoded)%>%gt()

data_clean<-data_clean%>%mutate(
  indig=case_when (nz_indigenous_recoded==1 | aus_indigenous_recoded==1 ~ 1,
                   nz_indigenous_recoded==0 | aus_indigenous_recoded==0 ~ 0,
                   TRUE~4)
)

data_clean%>%count(indig)


data_clean%>% ggplot(
  aes(as_factor(indig), fill=as_factor(cvdrisk_index_merged))
  )+
  geom_bar(position="dodge")+
  labs(
    title="Indigenous",
    fill="Risk categories"
  )

```

Sleep: `Sleep` > `sleep`
0, Less than 1 | 1, 1 | 2, 2 | 3, 3 | 4, 4 | 5, 5 | 6, 6 | 7, 7 | 8, 8 | 9, 9 | 10, 10 | 11, 11 | 12, 12 | 13, More than 12

too many


Suggestion (look at the bar chart below to see distinct groupings)

0-3: low sleep
4-6: not enough
7-8: moderate sleep
9-13: enough (=high?) sleep

but - you still have 20 in NAs for sleep. How do you want to treat them?

```{r}

data_clean<-data_clean%>%
  rename(
    sleep=Sleep
  )

data_clean%>%count(sleep)%>%
  mutate(prop= round(n / sum(n), 3)) %>%gt()

data_clean%>% ggplot(aes(as_factor(sleep), fill=as_factor(sleep)))+
                       geom_bar()+
  labs(
    title="Sleep: measured in hours",
    fill="Sleep hrs",
    x="Hrs of sleep"
  )

data_clean%>% ggplot(
  aes(as_factor(sleep), fill=as_factor(cvdrisk_index_merged))
  )+
  geom_bar(position="dodge")+
  labs(
    title="Sleep: measured in hours",
    fill="Risk categories",
    x="Hrs of sleep"
  )

data_clean<-data_clean %>% mutate(
  sleep_categ=case_when(sleep<6 ~ "low_sleep",
                        (sleep>5 & sleep<9) ~ "moderate_sleep",
                        sleep>8 ~ "high_sleep",
                            TRUE ~ "not provided"
  )
)

data_clean%>% ggplot(
  aes(sleep_categ, fill=cvdrisk_index_merged)
  )+
  geom_bar(position="dodge")+
  labs(
    title="Sleep categories",
    fill="Risk categories",
    x="Sleep categories"
  )

```

Sleep recorded

```{r eval=FALSE}

data_clean<-data_clean%>%
  mutate(
    sleep_recoded=case_when(
      sleep %in% c(0:3) ~ "low",
      sleep %in% c(4:6) ~ "not_enough",
      sleep %in% c(7:8) ~ "moderate",
      TRUE~"high"
    )
  )

data_clean%>%count(sleep_recoded)%>%
  mutate(prop= round(n / sum(n), 3)) %>%gt()

data_clean%>% ggplot(aes(fct_reorder(as_factor(sleep_recoded),sleep_recoded), fill=as_factor(sleep_recoded)))+
                       geom_bar()+
  labs(
    title="Sleep: measured low, moderate, high",
    fill="Sleep categories",
    x="Sleep"
  )

data_clean%>% ggplot(
  aes(as_factor(sleep_recoded), fill=as_factor(cvdrisk_index_merged))
  )+
  geom_bar(position="dodge")+
  labs(
    title="Sleep categories",
    fill="Risk categories",
    x="Sleep"
  )

```

Alcohol amount

`alcohol`: Do you drink alcohol regularly?

`alcohol.amount`: How many alcoholic drinks do you have on average per day? 
0, less than 1 | 1, 1 | 2, 2 | 3, 3 | 4, 4 | 5, 5 | 6, More than 5


```{r}

data_clean%>%count(alcohol) %>%gt()

data_clean%>%count(alcohol.amount)%>%
  mutate(prop= round(n / sum(n), 3))%>%gt()

data_clean%>% ggplot(aes(as_factor(alcohol), fill=as_factor(cvdrisk_index_merged)))+
  geom_bar(position="dodge")+labs(
    title="Alcohol: distribution across Risk categories",
    x= "Do you drink alcohol regularly?",
    fill="Risk categories"
  )

```

Depression score: `EQ5D_anxdep`

Treatment for NAs?

1, I am not anxious or depressed | 

2, I am slightly anxious or depressed | 

3, I am moderately anxious or depressed | 

4, I am severely anxious or depressed | 

5, I am extremely anxious or depressed

```{r}
data_clean<-data_clean%>%mutate(
  EQ5D_anxdep=factor(EQ5D_anxdep)
)

data_clean%>%count(EQ5D_anxdep)

data_clean%>% ggplot(aes(as_factor(cvdrisk_index_merged), fill=as_factor(cvdrisk_index_merged)))+
  geom_bar()+
  facet_wrap(~EQ5D_anxdep,
    
    labeller = labeller(EQ5D_anxdep = c(
      "1"="I am not anxious or depressed",
"2"="I am slightly anxious or depressed", 

"3" ="I am moderately anxious or depressed",  

"4"="I am severely anxious or depressed",  

"5"="I am extremely anxious or depressed"
    )))+labs(
    title="Risk factors across depression categories",
    fill="Risk categories",
    x="Risk categories"
  )

```

Pain score = 

EQ_pain: On a scale of 0 - 10, with 0 being no pain and 10 being the worst pain possible

paincat: 0 = None, <6 = Mild, <8 = Moderate, 8 or above = Severe

```{r}

data_clean%>%count(paincat, sort=TRUE)

data_clean<-data_clean%>%mutate(
  paincat=replace_na(paincat, "not_provided")
)
data_clean%>%count(paincat, sort=TRUE)

data_clean%>%count(oa_check)

data_clean%>% ggplot(aes(as_factor(oa_check), fill=as_factor(cvdrisk_index_merged)))+
  geom_bar(position="dodge")
```

Country:
```{r}
data_clean%>%count(cob, sort=TRUE)%>%
  mutate(prop= round(n / sum(n), 3))%>%
  reactable(searchable = TRUE,
            filterable=TRUE)
```


## Model

Model data

```{r}
model_data<-data_clean%>%
  select(
    cvdrisk_index_merged,
age_categ,
gender,
waiting_time_yrs,
OA,
edu_level_categ,
indig,
sleep_categ,
alcohol,
EQ5D_anxdep,
paincat
  )

model_data<-model_data%>%na.omit()%>%mutate(across(everything(), factor))

summary(model_data)
```

Stratification is used to split the data into training and testing subset. 
Additionally, validation set is used for training with 80% of data allocated.

```{r}
splits      <- initial_split(model_data, strata = cvdrisk_index_merged)
model_data_other <- training(splits)
model_data_test  <- testing(splits)

val_set <- validation_split(model_data_other, 
                            strata = cvdrisk_index_merged, 
                            prop = 0.80)

model_recipe <- 
  recipe(cvdrisk_index_merged ~ ., data = model_data_other) %>% 
  step_nzv(all_predictors()) %>%
  step_dummy(all_predictors())
```

### Penalized logistic regression (multinomial regression with glmnet)

linear predictors to predict multiclass data using the multinomial distribution.


```{r}
lr_mod <- 
  multinom_reg(penalty = tune(), mixture = double(1)) %>% 
  set_engine("glmnet")

lr_workflow <- 
  workflow() %>% 
  add_model(lr_mod) %>% 
  add_recipe(model_recipe)

lr_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
```

Grid tuning for penalty values

Lowest penalty values vs highest penalty values


```{r}
lr_reg_grid %>% top_n(-5) # lowest penalty values

lr_reg_grid %>% top_n(5)  # highest penalty values

```

```{r}
lr_res <- 
  lr_workflow %>% 
  tune_grid(val_set,
            grid = lr_reg_grid,
            control = control_grid(save_pred = TRUE),
            metrics = metric_set(roc_auc))
```



```{r}
lr_plot <- 
  lr_res %>% 
  collect_metrics() %>% 
  ggplot(aes(x = penalty, y = mean)) + 
  geom_point() + 
  geom_line() + 
  ylab("Area under the ROC Curve") +
  scale_x_log10(labels = scales::label_number())

lr_plot 
```

This plots shows us that model performance is generally better at the higher penalty values

not all predictors are important in the model.

a large enough penalty  removes all predictors from the model, this brings the effect on the predictive accuracy with no predictors in the model.

“best” value for penalty using ROC_AUC

```{r}

top_models <-
  lr_res %>% 
  show_best("roc_auc", n = 15) %>% 
  arrange(penalty) 
top_models

```

```{r}

lr_best <- 
  lr_res %>% 
  collect_metrics() %>% 
  arrange(penalty) %>% 
  slice(30)
lr_best
```
Validation set

```{r}

lr_auc <- lr_res %>% 
  collect_predictions() %>%
  roc_auc(
    truth = cvdrisk_index_merged ,
    .pred_0,
    .pred_1,
    .pred_2,
    .pred_3,
    .pred_4,
    estimator = "macro_weighted"
  )%>% 
  mutate(model = "Multinomial regression")

lr_res %>% 
  collect_predictions() %>%
  roc_curve(truth = cvdrisk_index_merged ,
    .pred_0,
    .pred_1,
    .pred_2,
    .pred_3,
    .pred_4) %>%
  autoplot()
  
```

### Random Forest

```{r}
cores <- parallel::detectCores()

rf_mod <- 
  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% 
  set_engine("ranger", num.threads = cores) %>% 
  set_mode("classification")



rf_workflow <- 
  workflow() %>% 
  add_model(rf_mod) %>% 
  add_recipe(model_recipe)

set.seed(345)
rf_res <- 
  rf_workflow %>% 
  tune_grid(val_set,
            grid = 25,
            control = control_grid(save_pred = TRUE),
            metrics = metric_set(roc_auc))

rf_best <- 
  rf_res %>% 
  select_best(metric = "roc_auc")

rf_best

autoplot(rf_res)

rf_res %>% 
  collect_predictions()


rf_auc <- 
  rf_res %>% 
  collect_predictions(parameters = rf_best) %>% 
  roc_curve(truth = cvdrisk_index_merged ,
    .pred_0,
    .pred_1,
    .pred_2,
    .pred_3,
    .pred_4) %>% 
  mutate(model = "Random Forest")

rf_auc

bind_rows(rf_auc, lr_auc) %>% 
  ggplot(aes(x = 1 - specificity, y = sensitivity, col = model)) + 
  geom_path(linewidth = 1.5, alpha = 0.8) +
  geom_abline(lty = 3) + 
  coord_equal() + 
  scale_color_viridis_d(option = "plasma", end = .6)

```


```{r}
# the last model
last_rf_mod <- 
  rand_forest(mtry = 8, min_n = 7, trees = 1000) %>% 
  set_engine("ranger", num.threads = cores, importance = "impurity") %>% 
  set_mode("classification")

# the last workflow
last_rf_workflow <- 
  rf_workflow %>% 
  update_model(last_rf_mod)

# the last fit
set.seed(345)
last_rf_fit <- 
  last_rf_workflow %>% 
  last_fit(splits)

last_rf_fit
```

```{r}

last_rf_fit %>% 
  collect_metrics()
```

variable importance scores

```{r}
last_rf_fit %>% 
  extract_fit_parsnip() %>% 
  vip::vip(num_features = 20)
```


```{r}
last_rf_fit %>% 
  collect_predictions() %>% 
  roc_curve(truth = cvdrisk_index_merged ,
    .pred_0,
    .pred_1,
    .pred_2,
    .pred_3,
    .pred_4) %>% 
  autoplot()
```

